//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_Assignment_2.EmployeeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/WCFEmpService")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> SalaryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Salary {
            get {
                return this.SalaryField;
            }
            set {
                if ((this.SalaryField.Equals(value) != true)) {
                    this.SalaryField = value;
                    this.RaisePropertyChanged("Salary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmployeeService.IEmpService")]
    public interface IEmpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DoWork", ReplyAction="http://tempuri.org/IEmpService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DoWork", ReplyAction="http://tempuri.org/IEmpService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllEmployee", ReplyAction="http://tempuri.org/IEmpService/GetAllEmployeeResponse")]
        System.Collections.Generic.List<WCF_Assignment_2.EmployeeService.Employee> GetAllEmployee();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllEmployee", ReplyAction="http://tempuri.org/IEmpService/GetAllEmployeeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Assignment_2.EmployeeService.Employee>> GetAllEmployeeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetEmployeeById", ReplyAction="http://tempuri.org/IEmpService/GetEmployeeByIdResponse")]
        WCF_Assignment_2.EmployeeService.Employee GetEmployeeById(System.Nullable<int> Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetEmployeeById", ReplyAction="http://tempuri.org/IEmpService/GetEmployeeByIdResponse")]
        System.Threading.Tasks.Task<WCF_Assignment_2.EmployeeService.Employee> GetEmployeeByIdAsync(System.Nullable<int> Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/InsertEmployee", ReplyAction="http://tempuri.org/IEmpService/InsertEmployeeResponse")]
        void InsertEmployee(WCF_Assignment_2.EmployeeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/InsertEmployee", ReplyAction="http://tempuri.org/IEmpService/InsertEmployeeResponse")]
        System.Threading.Tasks.Task InsertEmployeeAsync(WCF_Assignment_2.EmployeeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmpService/UpdateEmployeeResponse")]
        void UpdateEmployee(WCF_Assignment_2.EmployeeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmpService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task UpdateEmployeeAsync(WCF_Assignment_2.EmployeeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmpService/DeleteEmployeeResponse")]
        void DeleteEmployee(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmpService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task DeleteEmployeeAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/CelsiustoFahrenheit", ReplyAction="http://tempuri.org/IEmpService/CelsiustoFahrenheitResponse")]
        double CelsiustoFahrenheit(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/CelsiustoFahrenheit", ReplyAction="http://tempuri.org/IEmpService/CelsiustoFahrenheitResponse")]
        System.Threading.Tasks.Task<double> CelsiustoFahrenheitAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/FahrenheittoCelcius", ReplyAction="http://tempuri.org/IEmpService/FahrenheittoCelciusResponse")]
        double FahrenheittoCelcius(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/FahrenheittoCelcius", ReplyAction="http://tempuri.org/IEmpService/FahrenheittoCelciusResponse")]
        System.Threading.Tasks.Task<double> FahrenheittoCelciusAsync(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmpServiceChannel : WCF_Assignment_2.EmployeeService.IEmpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmpServiceClient : System.ServiceModel.ClientBase<WCF_Assignment_2.EmployeeService.IEmpService>, WCF_Assignment_2.EmployeeService.IEmpService {
        
        public EmpServiceClient() {
        }
        
        public EmpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public System.Collections.Generic.List<WCF_Assignment_2.EmployeeService.Employee> GetAllEmployee() {
            return base.Channel.GetAllEmployee();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Assignment_2.EmployeeService.Employee>> GetAllEmployeeAsync() {
            return base.Channel.GetAllEmployeeAsync();
        }
        
        public WCF_Assignment_2.EmployeeService.Employee GetEmployeeById(System.Nullable<int> Id) {
            return base.Channel.GetEmployeeById(Id);
        }
        
        public System.Threading.Tasks.Task<WCF_Assignment_2.EmployeeService.Employee> GetEmployeeByIdAsync(System.Nullable<int> Id) {
            return base.Channel.GetEmployeeByIdAsync(Id);
        }
        
        public void InsertEmployee(WCF_Assignment_2.EmployeeService.Employee employee) {
            base.Channel.InsertEmployee(employee);
        }
        
        public System.Threading.Tasks.Task InsertEmployeeAsync(WCF_Assignment_2.EmployeeService.Employee employee) {
            return base.Channel.InsertEmployeeAsync(employee);
        }
        
        public void UpdateEmployee(WCF_Assignment_2.EmployeeService.Employee employee) {
            base.Channel.UpdateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task UpdateEmployeeAsync(WCF_Assignment_2.EmployeeService.Employee employee) {
            return base.Channel.UpdateEmployeeAsync(employee);
        }
        
        public void DeleteEmployee(int Id) {
            base.Channel.DeleteEmployee(Id);
        }
        
        public System.Threading.Tasks.Task DeleteEmployeeAsync(int Id) {
            return base.Channel.DeleteEmployeeAsync(Id);
        }
        
        public double CelsiustoFahrenheit(int value) {
            return base.Channel.CelsiustoFahrenheit(value);
        }
        
        public System.Threading.Tasks.Task<double> CelsiustoFahrenheitAsync(int value) {
            return base.Channel.CelsiustoFahrenheitAsync(value);
        }
        
        public double FahrenheittoCelcius(int value) {
            return base.Channel.FahrenheittoCelcius(value);
        }
        
        public System.Threading.Tasks.Task<double> FahrenheittoCelciusAsync(int value) {
            return base.Channel.FahrenheittoCelciusAsync(value);
        }
    }
}
